ALGORITHM addition
VAR
    // Déclaration des variables
    tab_ensemble_1: ARRAY_OF INTEGER[4];
    tab_ensemble_2: ARRAY_OF INTEGER[5];
    i: INTEGER;
    somme:0

BEGIN
    tab_Ensemble_1 : [3, 1, 7, 9] 
    tab_Ensemble_2 : [2, 4, 1, 9, 3]
    somme <- 0
    POUR i DE 0 À 3 ETAPE 1 FAIRE
        SI tab_ensemble_1 [i] n\est pas dans tab_Ensemble_2
            somme <- somme + elements 
        fin si
    fin pour
    
    POUR i DE 0 À 4 ETAPE 1 FAIRE
        SI tab_ensemble_2 [i] n\est pas dans tab_Ensemble_1
            somme <- somme + elements 
        fin si
    fin pour

END



ALGORITHM ProduitScalaire(v1, v2)
VAR
     Si Longueur(v1) ≠ Longueur(v2)
BEGIN
    alors
        Retourner None  // Les vecteurs doivent avoir la même dimension
    Fin Si
    ps <- 0
    Pour i de 1 à Longueur(v1)
        ps <- ps + v1[i] * v2[i]
    Fin Pour
    Retourner ps
END


ALGORITHM  SontOrthogonaux(vecteurs)
VAR
     Pour i de 1 à Longueur(vecteurs) - 1
        Pour j de i + 1 à Longueur(vecteurs)
            ps <- ProduitScalaire(vecteurs[i], vecteurs[j])
            Si ps = 0 alors
                Afficher "Les vecteurs ", i, " et ", j, " sont orthogonaux."
            Sinon
                Afficher "Les vecteurs ", i, " et ", j, " ne sont pas orthogonaux."
            Fin Si
        Fin Pour
    Fin Pour
    Fin Algorithme

BEGIN
   vecteur1 <- [1, 0, 0]
    vecteur2 <- [0, 1, 0]
    vecteur3 <- [0, 0, 1]
    vecteurs <- [vecteur1, vecteur2, vecteur3]
    SontOrthogonaux(vecteurs)

END